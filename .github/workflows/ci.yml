name: CI

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches-ignore:
      - main

permissions:
  contents: read
  security-events: write

env:
  PYTHON_VERSION: "3.11"
  FLUTTER_VERSION: "3.16.0"
  MIN_COVERAGE: 85

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff flake8

      - name: Run Ruff linter
        working-directory: backend
        run: |
          ruff check . --output-format=github
        continue-on-error: false

      - name: Check code formatting with Ruff
        working-directory: backend
        run: |
          ruff format --check .

  backend-test:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests with coverage
        working-directory: backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          pytest \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=${{ env.MIN_COVERAGE }} \
            -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-report
          path: backend/htmlcov/

  # frontend-analyze:
  #   name: Frontend Analysis
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: 'stable'
  #         cache: true

  #     - name: Get Flutter dependencies
  #       working-directory: frontend
  #       run: flutter pub get

  #     - name: Verify Flutter installation
  #       run: flutter --version

  #     - name: Run Flutter analyzer
  #       working-directory: frontend
  #       run: flutter analyze --fatal-infos

  #     - name: Check formatting
  #       working-directory: frontend
  #       run: dart format --output=none --set-exit-if-changed .

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        working-directory: frontend
        run: flutter pub get

      - name: Run Flutter tests
        working-directory: frontend
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  frontend-build:
    name: Frontend Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        working-directory: frontend
        run: flutter pub get

      - name: Build Android APK (debug)
        working-directory: frontend
        run: flutter build apk --debug --no-shrink

      - name: Build Web
        working-directory: frontend
        run: flutter build web --release

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - backend-lint
      - backend-test
      # - frontend-analyze
      - frontend-test
      - frontend-build
      - security-scan
    
    steps:
      - name: All CI checks passed
        run: |
          echo "âœ… All CI checks passed successfully!"
          echo "This PR is ready for review."
