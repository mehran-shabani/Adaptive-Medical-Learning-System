name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: "3.11"
  FLUTTER_VERSION: "3.16.0"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      changelog: ${{ steps.generate_changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version: $CURRENT_VERSION"

      - name: Determine bump type
        id: bump_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ inputs.bump_type }}"
          else
            # Auto-detect from commit messages
            COMMITS=$(git log --pretty=%B origin/main...HEAD || git log --pretty=%B -1)
            if echo "$COMMITS" | grep -qiE "BREAKING CHANGE|major:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -qiE "^feat|feature:"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "🔢 Bump type: $BUMP_TYPE"

      - name: Bump version
        id: bump_version
        run: |
          python .github/scripts/bump_version.py ${{ steps.bump_type.outputs.bump_type }} > version_output.txt
          NEW_VERSION=$(cat version_output.txt | tail -n 1)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "✨ New version: $NEW_VERSION"

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "📌 Latest tag: $LATEST_TAG"

      - name: Generate changelog
        id: generate_changelog
        run: |
          CHANGELOG=$(python .github/scripts/changelog_from_commits.py ${{ steps.latest_tag.outputs.latest_tag }} HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "📝 Changelog generated"

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main
          git add VERSION
          git commit -m "chore(release): bump version to ${{ steps.bump_version.outputs.new_version }}" || echo "No changes to commit"
          git push origin main || {
            echo "Failed to push version bump. Another commit may have been pushed."
            exit 1
          }

      - name: Create Git tag
        run: |
          TAG="v${{ steps.bump_version.outputs.new_version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists!"
            exit 1
          fi
          git tag -a "$TAG" -m "Release version ${{ steps.bump_version.outputs.new_version }}"
          git push origin "$TAG"
          echo "🏷️ Created tag: v${{ steps.bump_version.outputs.new_version }}"

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: release
    outputs:
      image_digest: ${{ steps.build_push.outputs.digest }}
      image_tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.release.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.release.outputs.new_version }}
            type=semver,pattern={{major}},value=v${{ needs.release.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output image info
        run: |
          echo "🐳 Docker image built and pushed"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build_push.outputs.digest }}"

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        working-directory: frontend
        run: flutter pub get

      - name: Build release APK
        working-directory: frontend
        run: |
          # TODO: Add APK signing for production releases
          # For now, building unsigned APK for testing
          # To add signing:
          # 1. Generate keystore: keytool -genkey -v -keystore release-key.jks
          # 2. Add keystore to GitHub Secrets (base64 encoded)
          # 3. Create key.properties from secrets in workflow
          # 4. Update android/app/build.gradle with signing config
          flutter build apk --release
          echo "⚠️ WARNING: APK is unsigned. Not suitable for Play Store distribution."

      - name: Rename APK with version
        run: |
          VERSION="${{ needs.release.outputs.new_version }}"
          mkdir -p artifacts
          cp frontend/build/app/outputs/flutter-apk/app-release.apk \
             artifacts/adaptive-learning-v${VERSION}.apk
          echo "📱 APK built: adaptive-learning-v${VERSION}.apk"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: artifacts/adaptive-learning-v${{ needs.release.outputs.new_version }}.apk
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - release
      - build-backend
      - build-android
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: artifacts/

      - name: Create release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # Release v${{ needs.release.outputs.new_version }}
          
          ## What's Changed
          
          ${{ needs.release.outputs.changelog }}
          
          ---
          
          ## 📦 Release Artifacts
          
          ### 📱 Mobile App
          - **Android APK**: `adaptive-learning-v${{ needs.release.outputs.new_version }}.apk`
            - Download and install on Android devices
            - Minimum Android version: 5.0 (API level 21)
          
          ### 🐳 Backend Docker Image
          - **Registry**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`
          - **Tags**: 
            - `v${{ needs.release.outputs.new_version }}`
            - `latest`
          - **Digest**: `${{ needs.build-backend.outputs.image_digest }}`
          - **Platforms**: linux/amd64, linux/arm64
          
          **Pull command**:
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new_version }}
          ```
          
          ## 🚀 Deployment
          
          See [DEPLOYMENT_CHECKLIST.md](./backend/DEPLOYMENT_CHECKLIST.md) for deployment instructions.
          
          ## 📚 Documentation
          
          - [README](./README.md)
          - [Backend Documentation](./backend/README.md)
          - [Frontend Documentation](./frontend/README.md)
          - [Contributing Guidelines](./CONTRIBUTING.md)
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ needs.release.outputs.new_version }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.release.outputs.new_version }}
          name: Release v${{ needs.release.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/adaptive-learning-v${{ needs.release.outputs.new_version }}.apk
            VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release created
        run: |
          echo "🎉 Release v${{ needs.release.outputs.new_version }} created successfully!"
          echo "📱 Android APK attached"
          echo "🐳 Docker image published"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.new_version }}"

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs:
      - release
      - create-github-release
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "✅ Release pipeline completed successfully!"
          echo "Version: v${{ needs.release.outputs.new_version }}"
          echo "All artifacts built and published."
